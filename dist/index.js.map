{"version":3,"sources":["../../../.nvm/versions/node/v14.16.1/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack:/md-to-confluence-action/external node-commonjs \"node:fs\"","../webpack:/md-to-confluence-action/external node-commonjs \"node:url\"","../webpack:/md-to-confluence-action/lib/config.js","../webpack:/md-to-confluence-action/external node-commonjs \"node:path\"","../webpack:/md-to-confluence-action/external node-commonjs \"node:crypto\"","../webpack:/md-to-confluence-action/lib/util.js","../webpack:/md-to-confluence-action/lib/logger.js","../webpack:/md-to-confluence-action/lib/models/attachment.js","../webpack:/md-to-confluence-action/lib/models/image.js","../webpack:/md-to-confluence-action/lib/models/graph.js","../webpack:/md-to-confluence-action/lib/models/meta.js","../webpack:/md-to-confluence-action/lib/models/page.js","../webpack:/md-to-confluence-action/lib/models/local-page.js","../webpack:/md-to-confluence-action/lib/models/remote-page.js","../webpack:/md-to-confluence-action/lib/context.js","../webpack:/md-to-confluence-action/external node-commonjs \"node:querystring\"","../webpack:/md-to-confluence-action/lib/confluence-sdk-errors.js","../webpack:/md-to-confluence-action/lib/retry-policy.js","../webpack:/md-to-confluence-action/lib/confluence-sdk.js","../webpack:/md-to-confluence-action/lib/base-sdk.js","../webpack:/md-to-confluence-action/lib/kroki-sdk.js","../webpack:/md-to-confluence-action/lib/plantuml-sdk.js","../webpack:/md-to-confluence-action/lib/renderers/graph-renderer.js","../webpack:/md-to-confluence-action/lib/plugins/fence.js","../webpack:/md-to-confluence-action/lib/plugins/image.js","../webpack:/md-to-confluence-action/lib/plugins/link.js","../webpack:/md-to-confluence-action/lib/renderers/page-renderer.js","../webpack:/md-to-confluence-action/lib/renderers/asset-renderer.js","../webpack:/md-to-confluence-action/lib/confluence-syncer.js","../webpack:/md-to-confluence-action/lib/index.js","../webpack:/md-to-confluence-action/webpack/bootstrap","../webpack:/md-to-confluence-action/webpack/runtime/async module","../webpack:/md-to-confluence-action/webpack/runtime/define property getters","../webpack:/md-to-confluence-action/webpack/runtime/hasOwnProperty shorthand","../webpack:/md-to-confluence-action/webpack/runtime/compat","../webpack:/md-to-confluence-action/webpack/startup"],"names":["module","exports","eval","__WEBPACK_EXTERNAL_createRequire","import","meta","url","external_node_url_namespaceObject","packageFile","__webpack_require__","ab","external_node_path_namespaceObject","external_node_crypto_namespaceObject","ALG","fileHash","path","encoding","contents","external_node_fs_","readFileSync","createHash","update","digest","validateType","name","value","type","article","includes","error","Error","Array","isArray","keyBy","array","attribute","index","split","length","forEach","object","pathValue","dig","first","rest","safePath","file","base","process","cwd","resolveFrom","dirname","startsWith","resolvedPath","resolve","existsSync","relative","util","debug","message","core","warn","warning","info","isDebug","notice","fail","setFailed","logger","summary","Attachment","constructor","this","filename","basename","render","renderer","attachment","Image","alt","super","markup","models_image","Graph","imageFilename","ext","extname","renderGraph","models_graph","Meta","repo","sha","gitRef","gitSha","publisherVersion","git_ref","config","Z","github","refName","git_sha","publisher_version","version","githubUrl","toConfluenceProperties","properties","Object","entries","key","publisherVersionConflict","publishedVersion","slice","join","currentVersion","models_meta","Page","title","page","LocalPage","html","_html","attachments","_attachments","parentPageId","_parentPageId","id","attachmentFiles","_attachmentFiles","files","loadMarkdown","endsWith","async","renderPage","renderAttachments","rendered","push","confluence","created","createPage","createAttachment","local_page","RemotePage","parentId","localPage","_local","shouldUpdate","forceUpdate","repoConflict","deletePage","updated","updatePage","remote_page","MKDOCS_YML","README_MD","loadConfig","basePath","mkDocsFile","yml","json","_notfoundyaml","parse","nav","repo_url","site_name","trim","traverse","pages","item","pageTitle","keys","pagePath","values","getPage","titlePrefix","safe","exists","relPath","prefixedTitle","getContext","readMe","pageRefs","reduce","obj","context","siteName","JSON","stringify","external_node_querystring_namespaceObject","RequestError","status","statusText","retryPolicy","axios","_notfoundaxios_retry","retries","retryDelay","exponentialDelay","retry_policy","CONTENT_PATH","EXPAND_PROPERTIES","ConfluenceSdk","host","user","token","spaceKey","pageLimit","authHeader","Buffer","from","toString","api","_notfoundaxios","create","validateStatus","baseURL","headers","Authorization","Accept","query","expand","start","limit","Map","nextUri","response","get","data","validateResponse","size","results","pageData","remotePage","set","_links","next","currentUser","accountId","accountType","Number","parseInt","number","pageMeta","metadata","payload","space","ancestors","body","storage","representation","editor","restrictions","operation","group","_getCurrentUser","then","assign","post","put","delete","pageId","formData","_notfoundform_data","append","createReadStream","getHeaders","validStatuses","undefined","confluence_sdk","BaseSdk","supportedTypes","fileCheck","request","src","dest","Promise","reject","out","createWriteStream","on","pipe","base_sdk","KrokiSdk","defaults","stream","responseType","kroki_sdk","PlantUmlSdk","encoded","_notfoundplantuml_encoder","encode","plantuml_sdk","KROKI_RENDERER","PLANTUML_RENDERER","MERMAID_PLUGIN_RENDERER","GraphRenderer","kroki","plantuml","plantUml","baseUrl","graph","imagePath","toPng","graph_renderer","fence_plugin","md","options","graphs","supportedGraphs","rules","fence","tokens","idx","_","env","language","content","processGraph","codeMacro","cdata","fence_escape","parameter","str","replace","source","extension","writeFileSync","image_plugin","_default","image","self","attrs","fromEntries","utils","escapeHtml","isLocal","plugins_image","link_plugin","link_open","confluenceLinkOpen","renderToken","link_close","linkOpenIdx","confluenceLinkClose","link","href","link_isLocal","toLowerCase","plugins_link","PARSER_OPTIONS","xhtmlOut","PageRenderer","parser","_notfoundmarkdown_it","use","markdown","footer","page_renderer","AssetRenderer","pageRenderer","graphRenderer","asset_renderer","sync","localPages","assetRenderer","home","syncHome","syncPages","rootUrl","syncSummary","errorHandler","addHeading","addRaw","addBreak","addLink","addEOL","write","safeConfig","stack","findParentPage","homePage","findPage","parentPage","union","unpublish","remotePages","getChildPages","cleanup","cleanupSummary","action","_config_js__WEBPACK_IMPORTED_MODULE_0__","_confluence_syncer_js__WEBPACK_IMPORTED_MODULE_1__","E","__webpack_module_cache__","moduleId","cachedModule","threw","__webpack_modules__","webpackQueues","Symbol","webpackExports","webpackError","resolveQueue","queue","d","fn","r","wrapDeps","deps","map","dep","e","ret","x","a","hasAwait","depQueues","Set","currentDeps","outerResolve","promise","rej","getResult","fnQueue","q","has","add","err","definition","o","defineProperty","enumerable","prop","prototype","hasOwnProperty","call","URL","pathname","match","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":[null,"module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:url\");",null,"const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:path\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:crypto\");","/**\n * @module util\n */\nimport path from 'node:path';\nimport { createHash } from 'node:crypto';\nimport { readFileSync, existsSync } from 'node:fs';\n\nconst ALG = 'sha256';\n\n/**\n * Compute a hash for a file's contents\n * \n * @param {string} path - File path \n * @param {string} encoding [utf8] - File encoding\n * @returns {string} The hex encoded hash digest\n */\nfunction fileHash(path, encoding = 'utf8') {\n    const contents = readFileSync(path, encoding);\n    return createHash(ALG).update(contents, encoding).digest('hex');\n}\n\n/**\n * Validate th type of an argument\n * \n * @param {string} name - The argument's name\n * @param {any} value - The argument's value \n * @param {string} type - The expected value type  \n * @returns {undefined} When validation passes\n * @throws Error if validation fails\n */\nfunction validateType(name, value, type) {\n    const article = 'aeiou'.includes(type[0]) ? 'an' : 'a';\n    const error = new Error(`${name} should be ${article} ${type}`);\n    if (type === 'array' && Array.isArray(value)) {\n        return;\n    } else if (type === 'object') {\n        if (\n            typeof value !== 'object' ||\n            value === null ||\n            Array.isArray(value)\n        ) {\n            throw error;\n        }\n    } else if (typeof value !== type) {\n        throw error;\n    }\n}\n\nfunction keyBy(array, attribute) {\n    const index = {};\n    const path = attribute.split('.');\n    if (Array.isArray(array) && array.length > 0) {\n        array.forEach((object) => {\n            const pathValue = dig(object, path);\n            if (pathValue) {\n                index[pathValue] = object;\n            }\n        });\n    }\n    return index;\n}\n\nfunction dig(object, [first, ...rest]) {\n    if (!object[first]) {\n        return;\n    }\n    if (rest.length > 0) {\n        return dig(object[first], rest);\n    }\n    return object[first];\n}\n\n/**\n * Examines if a relative path resolves under the CWD\n * @example\n * safePath('../../../../../etc/passwd'); // Returns `undefined`\n * \n * @param {string} file - The relative file path \n * @param {string} base [`process.cwd()`] - The base path to resolve file path\n * @returns {string|undefined} `undefined` if file path is not considered safe\n * @export\n */\nfunction safePath(file, base = process.cwd()) {\n    // Transpose absolute paths under process.cwd()\n    let resolveFrom = path.dirname(base);\n    if (file.startsWith('/')) {\n        // consider the file to be relative to CWD\n        file = '.' + file;\n        resolveFrom = process.cwd();\n    }\n    const resolvedPath = path.resolve(resolveFrom, file);\n    if (resolvedPath.startsWith(process.cwd()) && existsSync(resolvedPath)) {\n        return path.relative(process.cwd(), resolvedPath);\n    }\n}\n\nexport default {\n    validateType, fileHash, keyBy, safePath\n};\n","/**\n * @module logger\n */\nimport core from '@actions/core';\n\n/**\n * debug log\n * @param {string} message - Log message\n */\nfunction debug(message) {\n    core.debug(message);\n}\n\n/**\n * error log\n * @param {string} message - Log message\n */\nfunction error(error) {\n    core.error(error);\n}\n\n/**\n * warn log\n * @param {string} message - Log message\n */\nfunction warn(error) {\n    core.warning(error);\n}\n\n/**\n * info log\n * @param {string} message - Log message\n */\nfunction info(message) {\n    core.info(message);\n}\n\n/**\n * @returns {boolean} True if debug is enabled\n */\nfunction isDebug() {\n    return core.isDebug();\n}\n\n/**\n * notice log\n * @param {string} message - Log message\n */\nfunction notice(message) {\n    core.notice(message);\n}\n\n/**\n * fail log\n * @param {string} message - Log message\n */\nfunction fail(message) {\n    core.setFailed(message);\n}\n\nexport default {\n    debug, warn, info, notice, error, isDebug, fail, summary: core.summary\n};\n","/**\n * @module models/attachment\n */\nimport { basename } from 'node:path';\n\n/**\n * Represents an attachment on a page\n */\nclass Attachment {\n    /**\n     * @param {*} path \n     */\n    constructor(path) {\n        this.path = path;\n    }\n\n    /**\n     * The filename of the attachment\n     * \n     * @type {string} \n     */\n    get filename() {\n        return basename(this.path);\n    }\n\n    /** \n    * Render the attachment using the `renderer` instance provided\n    * \n    * @param {AssetRenderer} renderer - an `AssetRenderer` instance\n    * @returns {Promise<string>} Path of the rendered attachment to be uploaded to Confluence\n    */\n    // eslint-disable-next-line no-unused-vars\n    render(renderer) {\n        return this.path;\n    }\n}\n\nexport default Attachment;\n","/**\n * @module models/image\n */\nimport Attachment from './attachment.js';\n\n/**\n * Represents an image found in a markdown file\n * \n * @extends Attachment\n */\nclass Image extends Attachment {\n    constructor(path, alt) {\n        super(path);\n        this.alt = alt;\n    }\n\n    /**\n     * HTML markup for this image\n     * \n     * @type {string} \n     */\n    get markup() {\n        return `<ac:image ac:alt=\"${this.alt}\"><ri:attachment ri:filename=\"${this.filename}\" /></ac:image>`;\n    }\n}\n\nexport default Image;\n","/**\n * @module models/graph\n */\nimport Attachment from './attachment.js';\nimport { extname, basename } from 'node:path';\n\n/**\n * Represents a graph found in a markdown file\n * \n * @extends Attachment\n */\nclass Graph extends Attachment {\n    constructor(path, type, renderer, alt) {\n        super(path);\n        this.type = type;\n        this.renderer = renderer;\n        this.alt = alt || `${type} graph`;\n    }\n\n    /**\n     * HTML markup for this graph\n     * \n     * @type {string} \n     */\n    get imageFilename() {\n        const ext = extname(this.filename);\n        const base = basename(this.filename, ext);\n        return base + '.png';\n    }\n\n    /**\n    * \n    * @returns {string} the HTML markup for this graph\n    */\n    get markup() {\n        switch (this.renderer) {\n            case 'kroki':\n            case 'plantuml':\n                return `<ac:image ac:alt=\"${this.alt}\"><ri:attachment ri:filename=\"${this.imageFilename}\" /></ac:image>`;\n            case 'mermaid-plugin':\n                return `<ac:structured-macro ac:name=\"mermaid-cloud\" data-layout=\"default\" ><ac:parameter ac:name=\"filename\">${this.filename}</ac:parameter></ac:structured-macro>`;\n            default:\n                return '';\n        }\n    }\n\n    render(renderer) {\n        return renderer.renderGraph(this);\n    }\n}\n\nexport default Graph;\n","/**\n * @module models/meta\n */\nimport config from '../config.js';\n\n/**\n * Represents metadata maintained for each page\n */\nclass Meta {\n    /**\n     * Constructor\n     * \n     * @param {string} repo - The GitHub repo url the page belongs to\n     * @param {string} path - The path of the page relative to the repo root\n     * @param {string} sha - The `sha256` hash of the page's content\n     * @param {string} gitRef - The git ref from where this page was published from\n     * @param {string} gitSha - The git commit from where this page was published from\n     * @param {string} publisherVersion - The version of the action that published the page\n     */\n    constructor(repo, path = null, sha = null, gitRef = null, gitSha = null, publisherVersion = null) {\n        this.repo = repo;\n        this.path = path;\n        this.sha = sha;\n        this.git_ref = gitRef || config.github.refName;\n        this.git_sha = gitSha || config.github.sha;\n        this.publisher_version = publisherVersion || config.version;\n    }\n\n    /**\n     * Fully qualified GitHub url of this page\n     * \n     * @type {string} \n     */\n    get githubUrl() {\n        return `${this.repo}/blob/${this.git_ref}/${this.path}`;\n    }\n\n    /**\n     * \n     * @returns {object} With all metadata transformed as Confluence `properties`\n     */\n    toConfluenceProperties() {\n        const properties = {};\n        Object.entries(this).forEach(([key, value]) => {\n            if (value) {\n                properties[key] = { key, value };\n            }\n        });\n        return properties;\n    }\n\n    /**\n     * \n     * @returns {boolean} `True` if the major/minor version of the action \n     * published this page is different than the current version\n     */\n    publisherVersionConflict() {\n        if (typeof this.publisher_version !== 'string') {\n            return true;\n        }\n        const publishedVersion = this.publisher_version.split('.').slice(0, 2).join();\n        const currentVersion = config.version.split('.').slice(0, 2).join();\n        return currentVersion !== publishedVersion;\n    }\n}\n\nexport default Meta;\n","/**\n * @module models/page\n */\n\n/**\n * Base Page class\n */\nclass Page {\n    /**\n     * Constructor\n     * \n     * @param {string} title - Page title\n     * @param {Meta} meta - Page metadata\n     */\n    constructor(title, meta) {\n        this.title = title;\n        this.meta = meta;\n    }\n\n    /**\n     * The path where the markdown of this page is located\n     * \n     * @type {string}\n     */\n    get path() {\n        return this.meta?.path;\n    }\n}\n\nexport default Page;\n","/**\n * @module models/local-page\n */\nimport { readFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport logger from '../logger.js';\nimport Page from './page.js';\n\n/**\n * Models a (markdown) page found in the local repo\n * \n */\nclass LocalPage extends Page {\n    /**\n     * Html markup\n     * \n     * @type {string} \n     */\n    get html() {\n        return this._html || '';\n    }\n\n    set html(html) {\n        this._html = html;\n    }\n\n    /**\n     * Attachments on this page\n     * \n     * @type {Array<Attachment>}\n     */\n    get attachments() {\n        if (!this._attachments) {\n            this._attachments = [];\n        }\n        return this._attachments;\n    }\n\n    set attachments(attachments) {\n        this._attachments = attachments;\n    }\n\n    /**\n     * The id of the parent confluence page\n     * \n     * @type {number} \n     */\n    get parentPageId() {\n        return this._parentPageId;\n    }\n\n    set parentPageId(id) {\n        this._parentPageId = id;\n    }\n\n    /**\n     * Array of rendered attachment files\n     * \n     * @type {Array<string>} \n     */\n    get attachmentFiles() {\n        if (!this._attachmentFiles) {\n            this._attachmentFiles = [];\n        }\n        return this._attachmentFiles;\n    }\n\n    set attachmentFiles(files) {\n        this._attachmentFiles = files;\n    }\n\n    /**\n     * Loads the markdown file from `this.meta.path`\n     * \n     * @return {string} The contents of the markdown file\n     */\n    loadMarkdown() {\n        if (!this.path) {\n            return;\n        }\n        if (!this.path.endsWith('.md')) {\n            throw new Error(`${this.path} is not a markdown (.md) file`);\n        }\n        return readFileSync(resolve(this.path), 'utf8');\n    }\n\n    /** \n    * Render the markdown of `this` page and `attachments`, using the provided `renderer`\n    * \n    * @param {AssetRenderer} renderer - an `AssetRenderer` instance\n    * @returns {LocalPage} `this` with `html` and `attachments` populated\n    */\n    async render(renderer) {\n        await renderer.renderPage(this);\n        await this.renderAttachments(renderer);\n        return this;\n    }\n\n    /**\n     * Render attachments of `this` page\n     * \n     * @param {AssetRenderer} renderer - an `AssetRenderer` instance\n     */\n    async renderAttachments(renderer) {\n        for (const attachment of this.attachments) {\n            const rendered = await attachment.render(renderer);\n            if (!rendered) {\n                logger.warn(`${attachment.constructor.name} \"${attachment.path}\" could not be processed`);\n            } else {\n                this.attachmentFiles.push(rendered);\n            }\n        }\n    }\n\n    /**\n     * Render and create `this` page to Confluence, including any attachments\n     * \n     * @param {AssetRenderer} renderer - an `AssetRenderer` instance\n     * @param {ConfluenceSdk} confluence - ConfluenceSdk instance to use for syncing\n     * @returns {Promise<RemotePage>} The `RemotePage` created\n     */\n    async sync(renderer, confluence) {\n        // Render page and attachments\n        await this.render(renderer);\n        // Publish page\n        const created = await confluence.createPage(this);\n        logger.debug(`Created Page: [${created.id}] ${created.title}`);\n        // Publish attachments\n        for (const attachment of this.attachmentFiles) {\n            await confluence.createAttachment(created.id, attachment);\n            logger.debug(`Attached file ${attachment}\" to page [${created.id}] ${created.title}`);\n        }\n        return created;\n    }\n}\n\nexport default LocalPage;\n","/**\n * @module models/remote-page\n */\nimport config from '../config.js';\nimport logger from '../logger.js';\nimport Page from './page.js';\n\n/**\n * Models a page on Confluence\n * \n * @extends Page\n */\nclass RemotePage extends Page {\n    /**\n     * Constructor\n     * \n     * @param {number} id \n     * @param {number} version \n     * @param {string} title \n     * @param {Meta} meta \n     * @param {number} parentId \n     */\n    constructor(id, version, title, meta, parentId = null) {\n        super(title, meta);\n        this.id = id;\n        this.version = version;\n        this.parentId = parentId;\n    }\n\n    /**\n     * The related `LocalPage`\n     * @type {LocalPage} \n     */\n    get localPage() {\n        return this._local;\n    }\n\n    set localPage(page) {\n        this._local = page;\n    }\n\n    /**\n     * \n     * @returns {boolean} `True` if related to a local page and should be updated\n     */\n    shouldUpdate() {\n        if (!this.localPage) {\n            return false;\n        }\n        if (config.confluence.forceUpdate || this.meta.publisherVersionConflict()) {\n            return true;\n        }\n        return this.localPage.meta.sha !== this.meta.sha;\n    }\n\n    /**\n     * \n     * @returns {boolean} `True` if the `meta.repo` of this page is other than \n     * the `meta.repo` of the related `localPage`\n     */\n    repoConflict() {\n        if (!this.localPage) {\n            return false;\n        }\n\n        return this.meta.repo !== this.localPage.meta.repo;\n    }\n\n    /**\n    * Re-sync this page with Confluence.\n    * \n    * - If the page in not related to a `localPage`, it should be **deleted**.\n    * - If the page is related to a `localPage` and `shouldUpdate` \n    *   then **update** the page using the content from the `localPage`\n    * \n    * @param {AssetRenderer} renderer - an `AssetRenderer` instance\n    * @param {ConfluenceSdk} confluence - ConfluenceSdk instance to use for syncing\n    * @returns {Promise<RemotePage>} The updated `RemotePage`\n    */\n    async sync(renderer, confluence) {\n        const { localPage } = this;\n        if (!localPage) { // delete orphan\n            logger.debug(`Deleting page \"${this.title}\" #${this.id}`);\n            return confluence.deletePage(this.id);\n        }\n        if (!this.shouldUpdate()) { // skip update\n            logger.debug(`Skipping update of page \"${this.title}\" #${this.id}`);\n            return this;\n        }\n        localPage.parentPageId = this.parentId;\n        // Render the related local page\n        await localPage.render(renderer);\n        // Publish attachments\n        for (const attachment of localPage.attachmentFiles) {\n            await confluence.createAttachment(this.id, attachment);\n            logger.debug(`Attached file ${attachment}\" to page \"${this.title}\" #${this.id}`);\n        }\n        // Update the remote page with the localPage content\n        const updated = await confluence.updatePage(this);\n        return updated;\n    }\n}\n\nexport default RemotePage;\n","/**\n * @module context\n */\nimport { readFileSync, existsSync } from 'node:fs';\nimport path from 'node:path';\nimport YAML from 'yaml';\nimport util from './util.js';\nimport logger from './logger.js';\nimport config from './config.js';\nimport { Meta, LocalPage } from './models/index.js';\n\nconst MKDOCS_YML = 'mkdocs.yml';\nconst README_MD = 'README.md';\n/**\n * Loads an parses the 'mkdocs.yml' file \n * \n * @param {string} basePath - the basepath to look for 'mkdocs.yml'\n * @returns {object} with nav, repo_url, site_name attributes\n */\nfunction loadConfig(basePath) {\n    const mkDocsFile = path.resolve(basePath, MKDOCS_YML);\n    const yml = readFileSync(mkDocsFile, 'utf8');\n    const json = YAML.parse(yml);\n    const { nav, repo_url, site_name } = json;\n    if (!Array.isArray(nav)) {\n        throw new Error(`nav is missing from your ${MKDOCS_YML} file`);\n    }\n    if (typeof repo_url !== 'string' || repo_url.trim().length === 0) {\n        throw new Error(`repo_url is missing from your ${MKDOCS_YML} file`);\n    }\n\n    return { nav, repo_url, site_name };\n}\n\n/**\n * Recursively traverses the `nav` object and adds `LocalPage`s to `pages` array\n *  \n * @param {string} repo_url - repo_url from 'mkdocs.yml'\n * @param {*} nav - nav object from 'mkdocs.yml'\n * @param {*} basePath - the basepath to resolve files\n * @param {Array<LocalPage>} pages \n * @returns {Array<LocalPage>} The array with all pages from `nav`\n */\nfunction traverse(repo_url, nav, basePath, pages = []) {\n    nav.forEach((item) => {\n        if (typeof item === 'string') {\n            throw new Error(`No title for ${item}`);\n        }\n        const pageTitle = Object.keys(item)[0];\n        const pagePath = Object.values(item)[0];\n        if (Array.isArray(pagePath)) {\n            traverse(repo_url, pagePath, basePath, pages);\n        } else {\n            const page = getPage(repo_url, pageTitle, path.resolve(basePath, 'docs', pagePath));\n            if (page) {\n                pages.push(page);\n            }\n        }\n    });\n    return pages;\n}\n\n/**\n * Creates `LocalPage` instances from the parameters\n * \n * @param {string} repo_url - Repository url \n * @param {string} title - Page title\n * @param {string} pagePath - Page path\n * @param {string} titlePrefix - Page title prefix\n * @returns {LocalPage} The page created from the parameters\n */\nfunction getPage(repo_url, title, pagePath, titlePrefix = config.confluence.titlePrefix) {\n    const safe = pagePath.startsWith(process.cwd());\n    const exists = safe && existsSync(pagePath);\n    const relPath = path.relative(process.cwd(), pagePath);\n    if (!exists) {\n        logger.warn(`Page \"${title}\" not found at \"${relPath}\"`);\n        return;\n    }\n    const sha = util.fileHash(pagePath);\n    const prefixedTitle = `${titlePrefix} ${title}`.trim();\n    return new LocalPage(prefixedTitle, new Meta(repo_url, relPath, sha));\n}\n\n/**\n * Create a context object with all information needed for the sync \n * \n * @param {string} basePath - Base path to resolve files\n * @returns {object} The context object\n */\nfunction getContext(basePath = '.') {\n    const { nav, repo_url, site_name } = loadConfig(basePath);\n    const pages = traverse(repo_url, nav, basePath);\n    const readMe = getPage(repo_url, site_name, path.resolve(basePath, README_MD), '');\n    const pageRefs = pages.reduce((obj, page) => {\n        obj[page.meta.path] = page.title;\n        return obj;\n    }, readMe ? { [readMe.meta.path]: readMe.title } : {});\n    const context = { siteName: site_name, repo: repo_url, pages, pageRefs };\n    if (readMe) {\n        context.readMe = readMe;\n    }\n\n    if (logger.isDebug()) {\n        logger.debug(`Context:\\n${JSON.stringify(context, null, 2)}`);\n    }\n    return context;\n}\n\nexport default { getContext };\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:querystring\");","/**\n * @module confluence-sdk-errors\n */\n\n/**\n * An error thrown when a request to confluence api fails\n */\nexport class RequestError extends Error {\n    constructor(status, statusText, message = null) {\n        super(`Request failed with: ${status} - ${message || statusText}`);\n    }\n}\n","/**\n * @module retry-policy\n */\nimport axiosRetry from 'axios-retry';\n\n/**\n * Apply the retry policy to Axios instance\n *\n * @param {Axios} axios - Axios instance\n */\nfunction retryPolicy(axios) {\n    axiosRetry(axios, { retries: 3, retryDelay: axiosRetry.exponentialDelay });\n}\n\nexport default retryPolicy;\n","/**\n * @module confluence-sdk\n */\nimport qs from 'node:querystring';\nimport fs from 'node:fs';\nimport axios from 'axios';\nimport FormData from 'form-data';\nimport { RequestError } from './confluence-sdk-errors.js';\nimport util from './util.js';\nimport logger from './logger.js';\nimport retryPolicy from './retry-policy.js';\nimport { Meta, RemotePage } from './models/index.js';\n\n/**\n * Default api prefix\n * @constant\n */\nconst CONTENT_PATH = '/wiki/rest/api/content';\n\n/**\n * Default content properties to request\n * @constant\n */\nconst EXPAND_PROPERTIES = [\n    'version',\n    'metadata.properties.repo',\n    'metadata.properties.path',\n    'metadata.properties.sha',\n    'metadata.properties.git_ref',\n    'metadata.properties.git_sha',\n    'metadata.properties.publisher_version'\n].join(',');\n\n/**\n * An SDK to access the Confluence API\n * \n * @see {@link https://developer.atlassian.com/cloud/confluence/rest/v1/intro/}\n */\nclass ConfluenceSdk {\n    constructor({ host, user, token, spaceKey, pageLimit }) {\n        util.validateType('host', host, 'string');\n        this.host = host;\n\n        util.validateType('spaceKey', spaceKey, 'string');\n        this.spaceKey = spaceKey;\n\n        util.validateType('user', user, 'string');\n        util.validateType('token', token, 'string');\n        this.authHeader =\n            'Basic ' + Buffer.from(`${user}:${token}`).toString('base64');\n        this.pageLimit = pageLimit;\n        this.api = axios.create({\n            validateStatus: (status) => status < 500,\n            baseURL: `${host}`,\n            headers: {\n                'Authorization': this.authHeader,\n                'Accept': 'application/json'\n            }\n        });\n        // Add retry policy\n        retryPolicy(this.api);\n    }\n\n    /**\n     * Return the children of a Confluence page\n     * \n     * @param {number} parentPageId - The `id` of the Confluence page\n     * @returns {Promise<Map<string,RemotePage>>} A `Map` of `RemotePages` indexed by their `path`\n     */\n    async getChildPages(parentPageId) {\n        util.validateType('parentPage', parentPageId, 'number');\n        const query = qs.stringify({\n            expand: EXPAND_PROPERTIES,\n            start: 0,\n            limit: this.pageLimit\n        });\n        const pages = new Map();\n        let nextUri = `${CONTENT_PATH}/${parentPageId}/child/page?${query}`;\n\n        while (nextUri) {\n            const response = await this.api.get(nextUri);\n            const data = this.validateResponse(response);\n            if (data.size === 0) {\n                break;\n            }\n            data.results.forEach((pageData) => {\n                const page = this.remotePage(pageData, parentPageId);\n                pages.set(page.meta.path, page);\n            });\n            nextUri = data._links?.next ? data._links.context + data._links.next : null;\n        }\n\n        return pages;\n    }\n\n    async _getCurrentUser() {\n        if (!this.currentUser) {\n            const response = await this.api.get(\n                '/wiki/rest/api/user/current'\n            );\n            const { type, accountId, accountType } = this.validateResponse(response);\n            this.currentUser = { type, accountId, accountType };\n        }\n        return this.currentUser;\n    }\n    /**\n     * Find page by title\n     * \n     * @param {string} title - The page title to find\n     * @returns {Promise<RemotePage|undefined>} The remote page or `undefined` if not found\n     */\n    async findPage(title) {\n        util.validateType('title', title, 'string');\n        const query = qs.stringify({\n            title,\n            type: 'page',\n            spaceKey: this.spaceKey,\n            expand: EXPAND_PROPERTIES\n        });\n        // find the page\n        const response = await this.api.get(\n            `${CONTENT_PATH}?${query}`\n        );\n\n        const data = this.validateResponse(response);\n\n        if (data.size === 0) {\n            return;\n        }\n\n        // return page info\n        const page = data.results[0];\n        return this.remotePage(page);\n    }\n\n    /**\n     * \n     * @param {object} page - Confluence page data\n     * @param {number} parentId - The `id` of the parent of `page`\n     * @returns {RemotePage} A `RemotePage` instance created from the `page` data\n     */\n    remotePage(page, parentId) {\n        return new RemotePage(\n            Number.parseInt(page.id, 10),\n            page.version.number,\n            page.title,\n            this.pageMeta(page),\n            parentId\n        );\n    }\n\n    /**\n     * \n     * @param {object} page - Confluence page data\n     * @returns {Meta} A `Meta` instance created from the `page.metadata`\n     */\n    pageMeta(page) {\n        const meta = page.metadata?.properties;\n        return new Meta(\n            meta?.repo?.value,\n            meta?.path?.value,\n            meta?.sha?.value,\n            meta?.git_ref?.value,\n            meta?.git_sha?.value,\n            meta?.publisher_version?.value\n        );\n    }\n\n    /**\n     * Create a `LocalPage` in Confluence\n     * \n     * @param {LocalPage} page - The local page to create in Confluence \n     * @returns {Promise<RemotePage>} The `RemotePage` created \n     */\n    async createPage(page) {\n        util.validateType('title', page.title, 'string');\n        util.validateType('html', page.html, 'string');\n\n        const payload = {\n            title: page.title,\n            type: 'page',\n            space: { key: this.spaceKey },\n            version: { number: 1 },\n            ancestors: [],\n            body: {\n                storage: { value: page.html, representation: 'storage' }\n            },\n            metadata: {\n                properties: {\n                    editor: {\n                        key: 'editor',\n                        value: 'v2'\n                    }\n                }\n            },\n            restrictions: {\n                update: {\n                    operation: 'update',\n                    restrictions: {\n                        user: { results: [] },\n                        group: { results: [] }\n                    }\n                }\n            }\n        };\n\n        await this._getCurrentUser().then((user) => {\n            payload.restrictions.update.restrictions.user.results.push(user);\n        });\n\n        if (page.meta) {\n            if (page.meta instanceof Meta) {\n                Object.assign(payload.metadata.properties, page.meta.toConfluenceProperties());\n            } else {\n                throw new Error('meta is not an instance of Meta class');\n            }\n        }\n\n        if (page.parentPageId) {\n            util.validateType('parentPage', page.parentPageId, 'number');\n            payload.ancestors.push({ id: page.parentPageId });\n        }\n\n        const response = await this.api.post(\n            CONTENT_PATH,\n            payload,\n            { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        const { id } = this.validateResponse(response);\n\n        // return a `RemotePage` instance\n        const remotePage = new RemotePage(Number.parseInt(id, 10), 1, page.title, page.meta, page.parentPageId);\n        remotePage.localPage = page;\n        return remotePage;\n    }\n\n    /**\n     * Update the content of an existing page.\n     *\n     * @param {RemotePage} remotePage - The page to be updated\n     * @returns {Promise<RemotePage>} The updated `RemotePage`\n     */\n    async updatePage(remotePage) {\n        const { localPage } = remotePage;\n        const title = localPage.title;\n        const html = localPage.html;\n        util.validateType('id', remotePage.id, 'number');\n        util.validateType('version', remotePage.version, 'number');\n        util.validateType('title', title, 'string');\n        util.validateType('html', html, 'string');\n        const payload = {\n            title,\n            type: 'page',\n            version: { number: remotePage.version + 1 }, // bump version\n            ancestors: [],\n            body: {\n                storage: { value: html, representation: 'storage' }\n            },\n            metadata: {\n                properties: {\n                    editor: {\n                        key: 'editor',\n                        value: 'v2'\n                    }\n                }\n            },\n            restrictions: {\n                update: {\n                    operation: 'update',\n                    restrictions: {\n                        user: { results: [] },\n                        group: { results: [] }\n                    }\n                }\n            }\n        };\n\n        await this._getCurrentUser().then((user) => {\n            payload.restrictions.update.restrictions.user.results.push(user);\n        });\n\n        if (localPage.meta) {\n            if (localPage.meta instanceof Meta) {\n                Object.assign(payload.metadata.properties, localPage.meta.toConfluenceProperties());\n            } else {\n                throw new Error('meta is not an instance of Meta class');\n            }\n        }\n\n        if (localPage.parentPageId) {\n            util.validateType('parentPage', localPage.parentPageId, 'number');\n            payload.ancestors.push({ id: localPage.parentPageId });\n        }\n\n        const response = await this.api.put(\n            `${CONTENT_PATH}/${remotePage.id}`,\n            payload,\n            { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        this.validateResponse(response);\n        remotePage.version++;\n        remotePage.meta = localPage.meta;\n        return remotePage;\n    }\n\n    /**\n     * Delete a Confluence page\n     * \n     * @param {number} id - The `id` of the Confluence page\n     * @returns {Promise<void>}\n     */\n    async deletePage(id) {\n        //TODO: check for children first\n        const response = await this.api.delete(\n            `${CONTENT_PATH}/${id}`\n        );\n        this.validateResponse(response, [204, 404]);\n    }\n\n    /**\n     * Create an attachment to a Confluence page from a local file\n     * \n     * @param {number} pageId - The `id` of the Confluence page\n     * @param {string} path - The `path` of the file to be attached\n     * @returns {Promise<void>}\n     */\n    async createAttachment(pageId, path) {\n        util.validateType('pageId', pageId, 'number');\n        util.validateType('path', path, 'string');\n        if (!fs.existsSync(path)) {\n            throw new Error(`Attachment '${path}' not exists`);\n        }\n        const formData = new FormData();\n        formData.append('minorEdit', 'true');\n        formData.append('file', fs.createReadStream(path));\n        const headers = Object.assign({ 'X-Atlassian-Token': 'nocheck' }, formData.getHeaders());\n        const response = await this.api.put(\n            `${CONTENT_PATH}/${pageId}/child/attachment`, formData, { headers }\n        );\n\n        this.validateResponse(response);\n    }\n\n    /**\n     * \n     * @param {AxiosResponse} response - An `AxiosResponse` object\n     * @param {Array<number>} validStatuses - An array of http statuses to consider successful\n     * @returns {object} The `response.data`\n     * @throws `RequestError` if `status` is not successful\n     */\n    validateResponse({ status, statusText, data }, validStatuses = [200]) {\n        if (!validStatuses.includes(status)) {\n            logger.error(JSON.stringify({ status, statusText, data }, undefined, 2));\n            throw new RequestError(status, statusText, data.message);\n        }\n        return data;\n    }\n}\n\nexport default ConfluenceSdk;\n","/**\n * @module base-sdk\n */\nimport path from 'node:path';\nimport { existsSync, createWriteStream } from 'node:fs';\nimport axios from 'axios';\nimport retryPolicy from './retry-policy.js';\n\n/**\n * The base class provides common functionality \n * for both KrokiSdk and PlantUmlSdk subclasses\n */\nclass BaseSdk {\n    /**\n     * \n     * @param {string} baseURL - The baseurl of the service\n     */\n    constructor(baseURL) {\n        this.api = axios.create({\n            validateStatus: (status) => status < 500,\n            baseURL\n        });\n        // Add retry policy\n        retryPolicy(this.api);\n    }\n\n    /**\n     * Supported graph types\n     * \n     * @type {Array<string>} \n     */\n    get supportedTypes() {\n        throw new Error('Unimplemented');\n    }\n\n    /**\n     * Check if file exists\n     * \n     * @param {string} file - The path to a file \n     */\n    fileCheck(file) {\n        if (!existsSync(file)) {\n            throw new Error(`File ${file} not found`);\n        }\n    }\n\n    /**\n     * Creates the http request that renders a graph to image\n     * Should be implemented by subclasses\n     * \n     * @abstract\n     * @param {string} file - The path to a file \n     * @param {string} type - Graph type\n     */\n    // eslint-disable-next-line no-unused-vars\n    request(file, type) {\n        throw new Error('Unimplemented');\n    }\n\n    /**\n     * Renders a graph to png image\n     * \n     * @param {Graph} param0 - The graph to render as png\n     * @returns {Promise<string>} The path to the image created\n     */\n    async toPng({ path: src, type }) {\n        if (!this.supportedTypes.includes(type)) {\n            throw new Error(\n                `Graph type ${type} is not one of supported [\"${this.supportedTypes.join('\", \"')}\"]`\n            );\n        }\n        this.fileCheck(src);\n        const response = await this.request(src, type);\n        if (response.status === 200) {\n            const ext = path.extname(src);\n            const dest = src.slice(0, -1 * ext.length) + '.png';\n            return new Promise((resolve, reject) => {\n                const out = createWriteStream(dest)\n                    .on('close', () => resolve(dest))\n                    .on('error', (error) => reject(error));\n                response.data.pipe(out);\n            });\n        }\n    }\n}\n\nexport default BaseSdk;\n","/**\n * @module kroki-sdk\n */\nimport { createReadStream } from 'node:fs';\nimport BaseSdk from './base-sdk.js';\n\n/**\n * SDK for the Kroki service\n * @extends BaseSdk\n */\nclass KrokiSdk extends BaseSdk {\n    constructor(baseURL) {\n        super(baseURL);\n        this.api.defaults.headers.post['Content-Type'] = 'text/plain';\n    }\n\n    get supportedTypes() {\n        return ['mermaid', 'plantuml'];\n    }\n\n    request(file, type) {\n        const stream = createReadStream(file, 'utf8');\n        return this.api.post(\n            `/${type}/png`, stream, { responseType: 'stream' }\n        );\n    }\n}\n\nexport default KrokiSdk;\n","/**\n * @module plantuml-sdk\n */\nimport { readFileSync } from 'node:fs';\nimport BaseSdk from './base-sdk.js';\nimport plantumlEncoder from 'plantuml-encoder';\n/**\n * SDK for the plantuml service\n * @extends BaseSdk\n */\nclass PlantUmlSdk extends BaseSdk {\n    get supportedTypes() {\n        return ['plantuml'];\n    }\n    request(file) {\n        const encoded = plantumlEncoder.encode(readFileSync(file, 'utf8'));\n        return this.api.get(\n            `/${encoded}`, { responseType: 'stream' }\n        );\n    }\n}\n\nexport default PlantUmlSdk;\n","/**\n * @module renderers/graph-renderer\n */\nimport KrokiSDK from '../kroki-sdk.js';\nimport PlantUmlSdk from '../plantuml-sdk.js';\n\nconst KROKI_RENDERER = 'kroki';\nconst PLANTUML_RENDERER = 'plantuml';\nconst MERMAID_PLUGIN_RENDERER = 'mermaid-plugin';\n\n/**\n * Render graphs to images based on the preferred method\n */\nclass GraphRenderer {\n    constructor({ kroki, plantuml }) {\n        this.kroki = new KrokiSDK(kroki.host);\n        this.plantUml = new PlantUmlSdk(plantuml.baseUrl);\n    }\n\n    /**\n     * Render a graph based on the configured render\n     * \n     * @param {Graph} graph - The graph to render\n     * @returns {string} The path of the rendered graph\n     */\n    async render(graph) {\n        let imagePath;\n        switch (graph.renderer) {\n            case KROKI_RENDERER:\n                imagePath = await this.kroki.toPng(graph);\n                break;\n            case PLANTUML_RENDERER:\n                imagePath = await this.plantUml.toPng(graph);\n                break;\n            case MERMAID_PLUGIN_RENDERER:\n                imagePath = graph.path;\n                break;\n        }\n        return imagePath;\n    }\n}\n\nexport default GraphRenderer;\n","/**\n * @module plugins/fence\n */\nimport path from 'node:path';\nimport { writeFileSync } from 'node:fs';\nimport Graph from '../models/graph.js';\n\n/**\n * MarkdownIt plugin to handle fenced code blocks\n * \n * @param {MarkdownIt} md - A `MarkdownIt` instance\n * @param {object} options - Plugin options\n */\nfunction plugin(md, options) {\n    const config = options.graphs;\n    const supportedGraphs = Object.keys(config);\n\n    md.renderer.rules.fence = (tokens, idx, _, env) => {\n        const token = tokens[idx];\n        const language = token?.info?.trim();\n        const content = token?.content?.trim();\n        if (supportedGraphs.includes(language)) {\n            return processGraph(config[language], content, env);\n        }\n        return codeMacro(language, content);\n    };\n}\n/**\n * \n * @param {string} language - Fenced code language attribute\n * @param {string} content - Fenced code content\n * @returns {string} Html markup\n */\nfunction codeMacro(language, content) {\n    if (content.length === 0) {\n        return '';\n    }\n\n    const cdata = `<![CDATA[${escape(content)}]]>`;\n    let parameter = '';\n    if (language.length > 0) {\n        parameter = `<ac:parameter ac:name=\"language\">${language.trim()}</ac:parameter>`;\n    }\n    return `<ac:structured-macro ac:name=\"code\">${parameter}<ac:plain-text-body>${cdata}</ac:plain-text-body></ac:structured-macro>\\n`;\n}\n\n/**\n * Escape the string `]]>` found in `str` in order to be valid inside a `CDATA` block\n *  \n * @param {string} str - Text to escape\n * @returns {string} Escaped text\n */\nfunction escape(str) {\n    return str.replace(/]]>/g, ']]]]><![CDATA[>');\n}\n\n/**\n * Processes graph content and produces appropriate markup based on the configuration\n * \n * @param {string} config - Configuration specific to the fenced code language attribute\n * @param {string} content - Fenced code content \n * @param {object} param2 - Parser environment object\n * @returns {string} Html markup\n */\nfunction processGraph(config, content, { page }) {\n    if (config.renderer === 'none') {\n        return codeMacro(config.type, content);\n    }\n    const source = page?.meta?.path;\n    const alt = `graph_${page.attachments.length + 1}`;\n    const graph = path.basename(source, '.md') + '_' + alt + config.extension;\n    const resolvedPath = path.resolve(path.dirname(source), graph);\n    writeFileSync(resolvedPath, content, 'utf8');\n    const relPath = path.relative(process.cwd(), resolvedPath);\n    const attachment = new Graph(relPath, config.type, config.renderer, alt);\n    page.attachments.push(attachment);\n    return attachment.markup;\n}\n\nexport default plugin;\n","/**\n * @module plugins/image\n */\nimport util from '../util.js';\nimport Image from '../models/image.js';\n\n/**\n * MarkdownIt plugin to handle images\n * \n * @param {MarkdownIt} md - A `MarkdownIt` instance\n */\nfunction plugin(md) {\n    const _default = md.renderer.rules.image;\n    md.renderer.rules.image = (tokens, idx, options, env, self) => {\n        const image = tokens[idx];\n        const attrs = Object.fromEntries(image.attrs);\n        const src = md.utils.escapeHtml(attrs.src);\n        const { page } = env;\n\n        if (isLocal(src)) {\n            const relPath = util.safePath(src, page?.path);\n            if (relPath) {\n                const alt = md.utils.escapeHtml(image.content);\n                const attachment = new Image(relPath, alt);\n                page?.attachments.push(attachment);\n                return attachment.markup;\n            }\n        }\n\n        return _default(tokens, idx, options, env, self);\n    };\n}\n/**\n * \n * @param {string} src - The `src` attribute of an image token\n * @returns {string} `true` if the `src` does not start with `http`\n */\nfunction isLocal(src) {\n    return !src.startsWith('http');\n}\n\nexport default plugin;\n","/**\n * @module plugins/link\n */\nimport util from '../util.js';\n\n/**\n * MarkdownIt plugin to handle links\n * \n * @param {MarkdownIt} md - A `MarkdownIt` instance\n */\nfunction plugin(md) {\n    md.renderer.rules.link_open = (tokens, idx, options, env, self) => {\n        const page = localPage(tokens, idx, env, md);\n        if (page) {\n            return confluenceLinkOpen(page);\n        }\n        return self.renderToken(tokens, idx, options);\n    };\n\n    md.renderer.rules.link_close = (tokens, idx, options, env, self) => {\n        // Links are parsed as 3 (or more) tokens [link_open],[text],[link_close]\n        // With idx in this context referring to [link_close] we backtrack\n        // To pick the related [link_open]\n        let linkOpenIdx = idx - 1;\n        while (tokens[linkOpenIdx].type !== 'link_open' && linkOpenIdx > -1) {\n            linkOpenIdx--;\n        }\n\n        if (tokens[linkOpenIdx].type === 'link_open' && localPage(tokens, linkOpenIdx, env, md)) {\n            return confluenceLinkClose();\n        }\n        return self.renderToken(tokens, idx, options);\n    };\n}\n\n/**\n * Lookup the title of the page the link token refers by path\n * \n * @param {Array<Token>} tokens - Array of parsed tokens\n * @param {number} idx - Current token index\n * @param {object} param2 - Parser env object\n * @param {MarkdownIt} md - A `MarkdownIt` instance\n * @returns {string|undefined} The title of the page if exists in `pageRefs`\n */\nfunction localPage(tokens, idx, { page, pageRefs }, md) {\n    const link = tokens[idx];\n    const attrs = Object.fromEntries(link.attrs);\n    const href = md.utils.escapeHtml(attrs.href);\n    if (isLocal(href)) {\n        const relPath = util.safePath(href, page?.path);\n        if (relPath && pageRefs && pageRefs[relPath]) {\n            return pageRefs[relPath];\n        }\n    }\n}\n/**\n * \n * @param {string} href - The `href` attribute of an image token\n * @returns {string} `true` if the `href` does not start with `http`\n */\nfunction isLocal(href) {\n    return !href.toLowerCase().startsWith('http');\n}\n\n/**\n * Opening markup for confluence link\n * \n * @param {string} title - Page title\n * @returns {string} Html markup\n */\nfunction confluenceLinkOpen(title) {\n    return `<ac:link ac:card-appearance=\"inline\"><ri:page ri:content-title=\"${title}\" /><ac:link-body>`;\n}\n\n/**\n * Closing markup for confluence link\n * \n * @returns {string} Html markup\n */\nfunction confluenceLinkClose() {\n    return '</ac:link-body></ac:link>';\n}\n\nexport default plugin;\n","/**\n * @module renderers/page-renderer\n */\nimport MarkdownIt from 'markdown-it';\nimport fence from '../plugins/fence.js';\nimport image from '../plugins/image.js';\nimport link from '../plugins/link.js';\n\n/**\n * Default parser options\n * @constant\n */\nconst PARSER_OPTIONS = { xhtmlOut: true, html: true };\n\n/**\n * Render pages to html\n */\nclass PageRenderer {\n    /**\n     * @param {object} param0 - config\n     * @param {object} pageRefs - An object with keys the page path and value the page title \n     */\n    constructor({ graphs }, pageRefs) {\n        this.pageRefs = pageRefs;\n        this.parser = new MarkdownIt(PARSER_OPTIONS)\n            .use(fence, { graphs })\n            .use(image)\n            .use(link);\n    }\n\n    /**\n     * Renders the markdown file represented by `page` as html\n     * \n     * @param {LocalPage} page - The page to render as html\n     * @returns The `page` with its `html` and `attachments` attributes populated \n     */\n    render(page) {\n        const markdown = page.loadMarkdown();\n        if (markdown) {\n            page.html = this.parser.render(markdown, { page, pageRefs: this.pageRefs })\n                + this.footer(page);\n        }\n        return page;\n    }\n\n    /**\n     * @param {LocalPage} page - The page to create a footer for\n     * @returns Html markup with a link to open the markdown source on GitHub\n     */\n    footer(page) {\n        return `<hr /><p style=\"text-align: right;\"><a href=\"${page.meta.githubUrl}\">Edit on GitHub</a> ✍️</p>\\n`;\n    }\n}\n\nexport default PageRenderer;\n","/**\n * @module renderers/asset-renderer\n */\nimport GraphRenderer from './graph-renderer.js';\nimport PageRenderer from './page-renderer.js';\n\n/**\n * A Renderer for both pages (to html) and graphs (to images)\n */\nclass AssetRenderer {\n    /**\n     * @param {object} config - Configuration object\n     * @param {object} pageRefs - Page references\n     */\n    constructor(config, pageRefs) {\n        this.pageRenderer = new PageRenderer(config, pageRefs);\n        this.graphRenderer = new GraphRenderer(config);\n    }\n\n    /**\n     * Renders a page to HTML + attachments\n     * \n     * @param {LocalPage} page - The page to render markup for\n     * @returns {LocalPage} The `page` rendered\n     */\n    renderPage(page) {\n        return this.pageRenderer.render(page);\n    }\n\n    /** \n     * Renders a graph (typically to png)\n     * \n     * @param {Graph} graph\n     * @returns {Promise<string>} the file where the graph was rendered to  \n     */\n    renderGraph(graph) {\n        return this.graphRenderer.render(graph);\n    }\n}\n\nexport default AssetRenderer;\n","/**\n * @module confluence-syncer\n */\nimport context from './context.js';\nimport config from './config.js';\nimport logger from './logger.js';\nimport ConfluenceSDK from './confluence-sdk.js';\nimport { Meta, LocalPage } from '../lib/models/index.js';\nimport AssetRenderer from './renderers/asset-renderer.js';\n\nconst confluence = new ConfluenceSDK(config.confluence);\n\n/**\n * Sync local markdown documentation with Confluence\n * \n * @returns {Promise<void>}\n */\nasync function sync() {\n    try {\n        const { siteName, repo, pages: localPages, readMe, pageRefs } = context.getContext();\n        const assetRenderer = new AssetRenderer(config, pageRefs);\n        const home = await syncHome(repo, siteName, readMe, assetRenderer);\n        await syncPages(home, localPages, assetRenderer);\n        const rootUrl = `${config.confluence.host}/wiki/spaces/${config.confluence.spaceKey}/pages/${home}`;\n        logger.info(`\"${siteName}\" Documentation published at ${rootUrl} by fork`);\n        syncSummary(siteName, rootUrl);\n    } catch (error) {\n        errorHandler(error);\n    }\n}\n\n/**\n * Write action summary\n * \n * @param {string} siteName - The name of the documentation site\n * @param {string} url - The Confluence url of the published documentation\n */\nfunction syncSummary(siteName, url) {\n    logger.summary.addHeading(':books: Documentation published', 1)\n        .addRaw('View the documentation using the following link')\n        .addBreak().addRaw(':link: ')\n        .addLink(siteName, url).addEOL()\n        .write();\n}\n\n/**\n * Handles errors and fails the action\n *  \n * @param {Error} error - The Error that occurred\n */\nfunction errorHandler(error) {\n    if (logger.isDebug()) {\n        const safeConfig = Object.assign({}, config);\n        safeConfig.confluence.token = '***';\n        logger.debug(`Config:\\n${JSON.stringify(safeConfig, null, 2)}`);\n        logger.debug(error.stack);\n    }\n    logger.fail(error);\n}\n\n/**\n * Create or update home page from README.md\n * \n * @param {string} repo \n * @param {string} siteName \n * @param {LocalPage} localPage \n * @param {AssetRenderer} renderer \n * @returns {Promise<number>} Home page id\n */\nasync function syncHome(repo, siteName, localPage, renderer) {\n    if (!localPage) {\n        localPage = new LocalPage(siteName, new Meta(repo));\n        localPage.html = `<h1>${siteName}</h1>`;\n    }\n    localPage.parentPageId = await findParentPage();\n    let homePage = localPage;\n    const remotePage = await confluence.findPage(siteName);\n    if (remotePage) {\n        homePage = remotePage;\n        homePage.localPage = localPage;\n        // check for potential repo conflict\n        if (homePage.repoConflict()) {\n            throw new Error(`Page \"${siteName}\" already exist for another repo \"${homePage.meta.repo}\"`);\n        }\n    }\n    return homePage.sync(renderer, confluence).then(page => page.id);\n}\n\n/**\n * Find the `id` of the Confluence page Configured to be the parent for our documents\n * \n * @returns {number} The `id` of the configured parent page\n * @throws `Error` if the configured parent page does not exist\n */\nasync function findParentPage() {\n    const title = config.confluence.parentPage;\n    if (!title) {\n        return;\n    }\n    const parentPage = await confluence.findPage(title);\n    if (!parentPage) {\n        throw new Error(`The page configured as parent (${title}) does not exist in confluence`);\n    }\n    return parentPage.id;\n}\n\n/**\n * Sync Local pages with Confluence\n * \n * @param {number} home - The id of the home page \n * @param {Array<LocalPage>} localPages - Array of pages\n * @param {AssetRenderer} renderer - `AssetRenderer` instance \n */\nasync function syncPages(home, localPages, renderer) {\n    // compute the union of local/remote pages that need to be synced\n    const pages = await union(home, localPages);\n    for (let page of pages) {\n        await page.sync(renderer, confluence);\n    }\n}\n\n/**\n * \n * @param {Iterable<RemotePage>} remotePages \n */\nasync function unpublish(remotePages) {\n    for (let page of remotePages) {\n        await confluence.deletePage(page.id).then(() => {\n            logger.debug(`Deleted Page: [${page.id}] ${page.title}`);\n        });\n    }\n}\n\n/**\n * Creates a union of remote and local pages that need to be synced with Confluence\n * \n * @param {number} parentPageId - The parent page to all pages\n * @param {Array<LocalPage>} localPages \n * @returns {Array<LocalPage|RemotePage>} An `array` of pages to be synced\n */\nasync function union(parentPageId, localPages) {\n    const remotePages = await confluence.getChildPages(parentPageId);\n    const union = [];\n    for (let localPage of localPages) {\n        localPage.parentPageId = parentPageId;\n        const remotePage = remotePages.get(localPage.meta.path);\n        if (!remotePage) {\n            union.push(localPage);\n            continue;\n        }\n        remotePages.delete(localPage.meta.path);\n        remotePage.localPage = localPage;\n        union.push(remotePage);\n    }\n    // Any remaining remote page not matching a local page should be deleted\n    for (let remotePage of remotePages.values()) {\n        union.push(remotePage);\n    }\n    return union;\n}\n\n/**\n * Cleanup all pages from confluence\n * \n * @returns {Promise<void>}\n */\nasync function cleanup() {\n    const { siteName } = await context.getContext();\n    try {\n        const home = await confluence.findPage(siteName);\n        if (!home) {\n            logger.warn(`No page with title \"${siteName}\" found in confluence, nothing to clean here`);\n            return;\n        }\n        const remotePages = await confluence.getChildPages(home.id);\n        // Delete all children\n        await unpublish(remotePages.values());\n        // Delete home\n        await unpublish([home]);\n        cleanupSummary(siteName);\n    } catch (error) {\n        errorHandler(error);\n    }\n}\n\n/**\n * Write action summary after cleanup\n * \n * @param {string} siteName - The site name \n */\nfunction cleanupSummary(siteName) {\n    logger.summary.addHeading(':broom: Cleanup', 1)\n        .addRaw(`All confluence pages of \"${siteName}\" have been deleted`).addEOL()\n        .write();\n}\n\nexport { sync, cleanup };\n","/**\n * Entry point\n * \n * @module index\n */\nimport config from './config.js';\nimport { sync, cleanup } from './confluence-syncer.js';\n\nconst action = config.confluence.cleanup ? cleanup : sync;\n\nawait action();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(37);\n"]}